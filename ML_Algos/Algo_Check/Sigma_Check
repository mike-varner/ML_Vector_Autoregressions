#Import Packages
import numpy
import pandas
from sklearn import linear_model

"""
Stage 1: Import and Clean Data
"""
#import data
qe_data = pandas.read_csv('/Users/Mike/Desktop/Bates Files/Senior Year/Thesis/Algo_Check/toy_data.csv', low_memory=False)
#remove date variable
date = pandas.DataFrame(qe_data, columns=['date'])
x = qe_data.drop('date', 1)

#create data without lags to use in variance/covariance calculation below
clean_data_with_out_lags = x.dropna(how='any')

#create lagged values of the endogeneous variables
x['L1_unemployment'] = x['unemployment'].shift(1)
x['L1_inflation'] = x['inflation'].shift(1)

#remove missing values created by creating lags
clean_data = x.dropna(how='any') 

'''Calculate the Variance/Covariance matrix using numpy
'''
Sigma = pandas.DataFrame(numpy.cov(clean_data_with_out_lags,rowvar=False))
#orthogonalize Sigma by imposing off diagonals are 0
#calculate cholesky decomposistion of sigma
chol_of_sigma = pandas.DataFrame(numpy.linalg.cholesky(Sigma))
#orthogonalize Sigma by imposing off diagonals are 0
diag_chol_sigma = pandas.DataFrame(numpy.diag(np.diag(chol_of_sigma)))
#define the inverse of the cholesky decomposistion of sigma to use below
inverse_chol = numpy.linalg.inv(diag_chol_sigma)
Q = pandas.DataFrame(inverse_chol)

Identity = pandas.DataFrame(numpy.matmul(numpy.matmul(Q,Sigma),Q.transpose()))

'''####Calculate Space-State version of the Q matrix
zero_columns = numpy.zeros((2,2))
zeros_4x2 = numpy.zeros((4,2))
#append add_on to to Sigma to get Q_Space_State
Q_Space_State = pandas.DataFrame(numpy.append(inverse_chol,zero_columns, axis=0))
Q_Space_State = pandas.DataFrame(numpy.column_stack((Q_Space_State,zeros_4x2)))
'''


'''Calculate B row by row using OLS
'''
ols = linear_model.LinearRegression()

lagged_data = clean_data.drop('unemployment',1)
lagged_data = pandas.DataFrame(lagged_data.drop('inflation',1))

unemployment_ols = ols.fit(lagged_data , clean_data.unemployment.as_matrix())
unemployment_ols_coeff = unemployment_ols.coef_
inflation_ols = ols.fit(lagged_data , clean_data.inflation.as_matrix())
inflation_ols_coeff = inflation_ols.coef_

B = inflation_ols_coeff
#append rows of coefficients 
B = numpy.vstack([unemployment_ols_coeff,B])
B_OLS_Row_by_Row = pandas.DataFrame(B)


'''

Calculate B using OLS formula B = YZ'(ZZ')^âˆ’1  pg.72 Lutkehpol

####Calculate the Y matrix (KxT)
Y = clean_data[clean_data_with_out_lags.columns.values].transpose().as_matrix()

####Calculate the Z matrix
#swap the rows and colummns of the clean_data matrix 
transpose_of_clean = clean_data.transpose()
#number of observatiosn, or columns
T = float(len(transpose_of_clean.columns))
#create a (1xT) row of 1s to add into the Z matrix
row_of_ones = numpy.ones((T,), dtype=np.int)
#add row of ones as the first column in transpose_of_clean
Z = numpy.vstack((row_of_ones,transpose_of_clean.as_matrix()))
Z = pandas.DataFrame(Z)

ZZ_inverse = numpy.linalg.inv(numpy.matmul(Z,Z.transpose()))
YZ_prime = numpy.matmul(Y,Z.transpose())
B_OLS = pandas.DataFrame(numpy.matmul(YZ_prime,ZZ_inverse))

#remove the first column which is the intercept column
B = B_OLS.drop(B_OLS.columns[[0]], axis=1) 

#put into space state to check if it works
I_4 = numpy.identity(2)
zero_columns = numpy.zeros((2,2))
add_on = numpy.column_stack((I_4,zero_columns))

#append add_on to to B to get B_Space_State
B_Space_State = pandas.DataFrame(numpy.append(B,add_on, axis=0))



Calculate IRs
'''
#create impulse column vector (TX1)
#e_unemp = pandas.DataFrame(numpy.vstack((numpy.vstack((numpy.zeros((1, 1)),1)),numpy.zeros((2,1)))))
    #e_unemp = pandas.DataFrame(numpy.vstack((numpy.zeros((1, 1)),1)))
e_unemp = pandas.DataFrame(numpy.vstack((1,numpy.zeros((1, 1)))))
e_0 = e_unemp

#run shock e_0 through system
Q_e = pandas.DataFrame(numpy.matmul(Q,e_0))



#create the point estimates IR_k = {e_0 , QBQe_0 , QB^2Qe_0 , ... , QB^kQe_0}
for p in range(1,21):
    globals()['point_estimate_{}'.format(p)] = pandas.DataFrame(numpy.matmul(Q, numpy.matmul(numpy.linalg.matrix_power(B_OLS_Row_by_Row, p),Q_e)))


impulse_qe_var = pandas.DataFrame(numpy.column_stack((Q_e,point_estimate_1)))
impulse_qe_var = pandas.DataFrame(numpy.column_stack((impulse_qe_var,point_estimate_2)))
impulse_qe_var = pandas.DataFrame(numpy.column_stack((impulse_qe_var,point_estimate_3)))
impulse_qe_var = pandas.DataFrame(numpy.column_stack((impulse_qe_var,point_estimate_4)))
impulse_qe_var = pandas.DataFrame(numpy.column_stack((impulse_qe_var,point_estimate_5)))
impulse_qe_var = pandas.DataFrame(numpy.column_stack((impulse_qe_var,point_estimate_6)))
impulse_qe_var = pandas.DataFrame(numpy.column_stack((impulse_qe_var,point_estimate_7)))
impulse_qe_var = pandas.DataFrame(numpy.column_stack((impulse_qe_var,point_estimate_8)))
impulse_qe_var = pandas.DataFrame(numpy.column_stack((impulse_qe_var,point_estimate_9)))
impulse_qe_var = pandas.DataFrame(numpy.column_stack((impulse_qe_var,point_estimate_10)))
impulse_qe_var = pandas.DataFrame(numpy.column_stack((impulse_qe_var,point_estimate_11)))
impulse_qe_var = pandas.DataFrame(numpy.column_stack((impulse_qe_var,point_estimate_12)))
impulse_qe_var = pandas.DataFrame(numpy.column_stack((impulse_qe_var,point_estimate_13)))
impulse_qe_var = pandas.DataFrame(numpy.column_stack((impulse_qe_var,point_estimate_14)))
impulse_qe_var = pandas.DataFrame(numpy.column_stack((impulse_qe_var,point_estimate_15)))
impulse_qe_var = pandas.DataFrame(numpy.column_stack((impulse_qe_var,point_estimate_16)))
impulse_qe_var = pandas.DataFrame(numpy.column_stack((impulse_qe_var,point_estimate_17)))
impulse_qe_var = pandas.DataFrame(numpy.column_stack((impulse_qe_var,point_estimate_18)))
impulse_qe_var = pandas.DataFrame(numpy.column_stack((impulse_qe_var,point_estimate_19)))
impulse_qe_var = pandas.DataFrame(numpy.column_stack((impulse_qe_var,point_estimate_20)))


#this is really messed up : doesn't look remotely correct
imp_qe_response_unemp = pandas.DataFrame(impulse_qe_var.loc[1:1].transpose())
